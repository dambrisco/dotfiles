" VIM Settings
" see gvimrc for gui vim settings

set nocompatible                " (cp) use Vim defaults (much better)
syntax on                       " turns syntax highlighting on
set ruler                       " (ru) show the cursor position at all times
set showcmd                     " (sc) display an incomplete command in the lower right
set history=200                 " (hi) keep 200 lines of command history
set showmatch                   " (sm) briefly jump to matching bracket when inserting one

set lazyredraw                  " screen not redrawn while executing macros, registers, and other command not typed
                                " - recommended by Gitv plugin creator, Greg Sexton

set wildmenu                    " better tab completion behavior in ex
set wildmode=list:longest

set autoindent                  " (ai) turn on auto-indenting (great for programers)
set copyindent                  " (ci) when auto-indenting, use the indenting format of the previous line
set smartindent                 " smartindent	(local to buffer)

set tabstop=2                   " (ts) width (in spaces) that a <tab> is displayed as
set shiftwidth=2                " (sw) width (in spaces) used in each step of autoindent (aswell as << and >>)
set softtabstop=2
set expandtab
set textwidth=80                " (tw) number of columns before an automatic line break is inserted (see formatoptions)
set formatoptions=croq          " (fo) influences how vim automatically formats text
set backspace=indent,eol,start  " (bs) allows backspacing beyond starting point of insert mode, indents and line breaks
set nrformats+=alpha            " (nf) adds alpha chars to list that gets incremented/decremented with ^A/^X
set lcs=tab:~~,trail:~          " (lcs) strings used in 'list' mode to show hidden characters (default=eol:$)
set list
set winminheight=0              " (wmh) the minimal height of the window when it's not the current window

set nowrap                      " allows text to continue off the window (need horizontal scrolling)
set numberwidth=4
set sidescrolloff=2
set scrolloff=2
set laststatus=2                " always show status line

set equalalways                 " Multiple windows, when created, are equal in size
set splitbelow splitright

set shellcmdflag=-lc            " Force shell commands to load personal bash init scripts

let mapleader=","

"Vertical split then hop to new buffer
noremap <Leader>v :vsp^M^W^W<cr>
noremap <Leader>h :split^M^W^W<cr>

" make scrolling the viewport a bit faster
nnoremap <C-e> 5<C-e>
nnoremap <C-y> 5<C-y>

" swap ' and ` keys. ` is more useful than ', but less convenient. FIXED.
nnoremap ' `
nnoremap ` '

" Navigating tags now just like moving forward and back through pages in a web browser
" use Apple+] to jump to a tag
map <D-]> <C-]>
" use Apple+[ to jump back up the tag stack
map <D-[> <C-t>

set cursorline
"set cursorcolumn

set wrapscan                    " (ws) allows search to wrap to top of document when the bottom has been hit
set incsearch                   " (is) highlights what you are searching for as you type
set nohlsearch                    " (hls) highlights all instances of the last searched string
set ignorecase                  " (ic) ignores case in search patterns
set smartcase                   " (scs) don't ignore case when the search pattern has uppercase
set infercase                   " (inf) during keyword completion, fix case of new word (when ignore case is on)

set foldcolumn=0                " (fdc) width of fold column (to see where folds are)
set foldmethod=syntax           " (fdm) creates folds that make sense for the language
set foldenable                  " (fen) enables or disables folding
" unfold all folds when a file is opened
autocmd  BufWinEnter * normal zR

set backup
set backupdir=~/.vim_tmp
set dir=~/.vim_tmp

" Pathogen set up
filetype off
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()
filetype plugin indent on

" easily get to vimrc
command Vimrc :e ~/.vimrc

" easily get to bashrc
command Bashrc :e ~/.bashrc

" pretty format an xml snippet
command Tidy -range=% :<line1>,<line2>!tidy -xml -i -q -w 0<CR>

" powder helpers
command PR :!powder restart<CR>

"set t_Co=256 " 256 colors
set background=dark
syntax on " syntax highlighting
colorscheme railscasts

autocmd FileType html :set filetype=xhtml " we couldn't care less about html

set fo-=r " do not insert a comment leader after an enter, (no work, fix!!)

" Markdown files get autowrap for text
autocmd FileType markdown :set formatoptions=tcoq

" Sessions ********************************************************************
" Sets what is saved when you save a session
set sessionoptions=blank,buffers,curdir,folds,help,resize,tabpages,winsize

" Misc ************************************************************************
set matchpairs+=<:>
set vb t_vb= " Turn off the bell, this could be more annoying, but I'm not sure how

" Cursor Movement *************************************************************
" Make cursor move by visual lines instead of file lines (when wrapping)
map <up> gk
map k gk
imap <up> <C-o>gk
map <down> gj
map j gj
imap <down> <C-o>gj
map E ge

" Override these cursor movements to make them more useful
" since ^ and $ are needed all the time but require leaving
" home row, and I never use H/M/L
map H ^
map L $

" Ruby stuff ******************************************************************
"compiler ruby         " Enable compiler support for ruby
"map <F5> :!ruby %<CR>

" let's me type a ruby method name, then hit shift-enter to add the def/end
" and leave the cursor positioned in the body of the method.
imap <S-Enter> <ESC>Idef <ESC>oend<ESC>O

" Omni Completion *************************************************************
autocmd FileType html :set omnifunc=htmlcomplete#CompleteTags
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete " may require ruby compiled in

" File Specific Settings
" ------------------------------------------------------------

au FileType xhtml,html,htm,php,xml setlocal tabstop=2
au FileType xhtml,html,htm,php,xml setlocal shiftwidth=2
"au FileType xhtml,html,htm,php,xml setlocal expandtab      " (et) expand tabs to spaces (use :retab to redo entire file)
au FileType xhtml,html,htm,php,xml setlocal softtabstop=2   " (sts) makes spaces feel like tabs (like deleting)

au FileType c,h,java,js setlocal mps+==:;                   " allow the match pairs operation (%) to work with '=' and ';'

au FileType c,h setlocal cindent                            " enable the intelligent cindent (cin) feature for the following files
au FileType java,js setlocal smartindent                    " enable the smartindenting (si) feature for the following files

au FileType txt setlocal fo+=tn

" before writing to any file, this function call will remove any extra white space at the end of a line
au! BufWrite,FileWritePre * call RemoveWhiteSpace()

" Miscellaneous Settings
" ------------------------------------------------------------
"
" (dict) dictionary used for keyword completion
" to use: while in insertion mode and in the middle of a word, type <ctrl-n> and <ctrl-p>
set dictionary-=/usr/share/dict/words dictionary+=/usr/share/dict/words
set complete-=k
" (tsr) thesaurus used for keyword completion
" to use: while in insertion mode and at the BEGINNING of a word, type <ctrl-x> then <ctrl-n>
"set thesaurus-=/usr/share/dict/mobythes.aur thesaurus+=/usr/share/dict/mobythes.aur
"set complete-=k complete+=k

" Key Mappings
" ------------------------------------------------------------

" allows moving between split windows much faster and more intuitive
map <C-up>    <C-W><up>
map <C-down>  <C-W><down>
map <C-left>  <C-W><left>
map <C-right> <C-W><right>

map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-H> <C-W>h
map <C-L> <C-W>l

" <F7> toggles hidden characters
map  <F7> :set list!<CR>
imap <F7> <ESC>:set list!<CR>a

" <F9> toggles word wrap
map  <F9> :set wrap!<CR>
imap <F9> <ESC>:set wrap!<CR>a

" <F8> toggles whether the last searched string is highlighted
map  <F8> :set hls!<CR>
imap <F8> <ESC>:set hls!<CR>a

" Cmd-y to duplicate visual selection beneath
vmap <D-y> y'>p
nmap <D-y> yyp

" Shift-Cmd-y to duplicate and comment out orig selection
noremap <D-Y> y'>pgv<C-Space>'>
nmap <D-Y> yypk<C-Space>j

" Cmd-j to jump to last line, Cmd-k to just to first line
nmap <D-j> G
nmap <D-k> gg

" Functions
" ------------------------------------------------------------

" Renames param1 tags to be param2 tags
function! RenameTag(param1, param2)
    :%s/<\(\/\?\)a:param1\(\_s*\)/<\1a:param2\2/gci
endfunction

" Strips the tag defined by the parameter (for html pages)
function! StripTag(TagName)
    :%s/a:TagName/hello/gci
    ":% s/<[^>]\+>//gci
endfunction

" Reverses all the lines in the file (top to bottom)
function! ReverseLines()
    :g/^/m0
endfunction

" Removes the ^M character from the end of every line
function! RemoveM()
    :%s/^M$//g
endfunction

" Replaces the ^M character with a carraige return native to the system
function! ReplaceM()
    :%s/^M/\r/g
endfunction

" Removes superfluous white space from the end of a line
function! RemoveWhiteSpace()
    let save_cursor = getpos(".")
    %s/\s*$//g
    call setpos('.', save_cursor)
endfunction

" Command Reference
" ------------------------------------------------------------
" *                     - searches for word under cursor
" gd                    - finds definition of variable/function under cursor
" ga                    - prints the ascii value of character under cursor
" gf                    - opens file under the cursor (in split view)
" gi                    - goes to insert mode in the same spot as you last inserted
" ~                     - changes case of character
" :r !<cmd>             - reads the output of the shell <cmd> into the file
" :% s/hello/A/gc       - typical search and replace command

" :% !tidy              - runs the code through the 'tidy' program

" :runtime! syntax/2html.vim
" :10,40TOhtml

" command reference ->  " za : fold toggle  toggles between a fold being opened and closed (zA does it recursively)
"                       " zc : fold close   close 1 fold under the cursor (zC does it recursively)
                        " zo : fold open    open 1 fold under the cursor (zO does it recursively)
                        " zm : fold more    increases foldlevel by 1 (zM opens all folds)
                        " zr : fold reduce  decreses foldlevel by 1 (zR closes all folds)

" :retab                - when expandtab is set, replace all tabs in the file with the # of spaces defined in 'shiftwidth'
" :retab!               - when expandtab is not set, replace the number of spaces in 'shiftwidth' with a tab
if has("cscope")
    set csprg=/usr/bin/cscope
    set csto=0
    set cst
    set nocsverb
    " add any database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
    " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
    set csverb

    "   's'   symbol: find all references to the token under cursor
    "   'g'   global: find global definition(s) of the token under cursor
    "   'c'   calls:  find all calls to the function name under cursor
    "   't'   text:   find all instances of the text under cursor
    "   'e'   egrep:  egrep search for the word under cursor
    "   'f'   file:   open the filename under cursor
    "   'i'   includes: find files that include the filename under cursor
    "   'd'   called: find functions that function under cursor calls
    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
endif

if &loadplugins
  source $HOME/.vim/plugin_vimrc
endif
